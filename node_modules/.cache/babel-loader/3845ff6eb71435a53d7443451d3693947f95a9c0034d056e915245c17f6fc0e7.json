{"ast":null,"code":"import { formulaForcolumnOfFour, formulaForcolumnOfThree, generateInvalidMoves } from '../../utils/formulas';\nimport { isColumnOfThree, checkForRowOfThree, checkForRowOfFour, isColumnOfFour } from '../../utils/moveCheckLogic';\nexport const dragEndReducer = state => {\n  var _squareBeingDragged, _squareBeingReplaced, _squareBeingDragged2, _squareBeingReplaced2;\n  const newBoard = [...state.board];\n  let {\n    boardSize,\n    squareBeingDragged,\n    squareBeingReplaced\n  } = state;\n  const squareBeingDraggedId = parseInt((_squareBeingDragged = squareBeingDragged) === null || _squareBeingDragged === void 0 ? void 0 : _squareBeingDragged.getAttribute('candy-id'));\n  const squareBeingReplacedId = parseInt((_squareBeingReplaced = squareBeingReplaced) === null || _squareBeingReplaced === void 0 ? void 0 : _squareBeingReplaced.getAttribute('candy-id'));\n  newBoard[squareBeingReplacedId] = (_squareBeingDragged2 = squareBeingDragged) === null || _squareBeingDragged2 === void 0 ? void 0 : _squareBeingDragged2.getAttribute('src');\n  newBoard[squareBeingDraggedId] = (_squareBeingReplaced2 = squareBeingReplaced) === null || _squareBeingReplaced2 === void 0 ? void 0 : _squareBeingReplaced2.getAttribute('src');\n  const validMoves = [squareBeingDraggedId - 1, squareBeingDraggedId - boardSize, squareBeingDraggedId + 1, squareBeingDraggedId + boardSize];\n  const validMove = validMoves.includes(squareBeingDraggedId);\n  const isAColumnOfFour = isColumnOfFour(newBoard, boardSize, formulaForcolumnOfFour(boardSize));\n  const isARowOfFour = checkForRowOfFour(newBoard, boardSize, generateInvalidMoves(boardSize, true));\n  const isAColumnofThree = isColumnOfThree(newBoard, boardSize, formulaForcolumnOfThree(boardSize));\n  const isARowOfThree = checkForRowOfThree(newBoard, boardSize, generateInvalidMoves(boardSize));\n  if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnofThree)) {\n    squareBeingDragged = undefined;\n    squareBeingReplaced = undefined;\n  } else {\n    var _squareBeingReplaced3, _squareBeingDragged3;\n    newBoard[squareBeingReplacedId] = (_squareBeingReplaced3 = squareBeingReplaced) === null || _squareBeingReplaced3 === void 0 ? void 0 : _squareBeingReplaced3.getAttribute('src');\n    newBoard[squareBeingDraggedId] = (_squareBeingDragged3 = squareBeingDragged) === null || _squareBeingDragged3 === void 0 ? void 0 : _squareBeingDragged3.getAttribute('src');\n  }\n  state.board = newBoard;\n};","map":{"version":3,"names":["formulaForcolumnOfFour","formulaForcolumnOfThree","generateInvalidMoves","isColumnOfThree","checkForRowOfThree","checkForRowOfFour","isColumnOfFour","dragEndReducer","state","_squareBeingDragged","_squareBeingReplaced","_squareBeingDragged2","_squareBeingReplaced2","newBoard","board","boardSize","squareBeingDragged","squareBeingReplaced","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMoves","validMove","includes","isAColumnOfFour","isARowOfFour","isAColumnofThree","isARowOfThree","undefined","_squareBeingReplaced3","_squareBeingDragged3"],"sources":["/Users/kamgyul/Desktop/vsc/CCrush/candycrush-clone/src/store/reducers/dragEnd.ts"],"sourcesContent":["import { WritableDraft } from 'immer/dist/types/types-external';\nimport { formulaForcolumnOfFour, formulaForcolumnOfThree, generateInvalidMoves } from '../../utils/formulas';\nimport { isColumnOfThree, checkForRowOfThree, checkForRowOfFour, isColumnOfFour } from '../../utils/moveCheckLogic';\n\nexport const dragEndReducer = (\n    state: WritableDraft<{\n        board: string[];\n        boardSize: number;\n        squareBeingReplaced: Element | undefined;\n        squareBeingDragged: Element | undefined;\n    }>\n) => {\n    const newBoard: string[] = [...state.board];\n    let { boardSize, squareBeingDragged, squareBeingReplaced } = state;\n    const squareBeingDraggedId: number = parseInt(squareBeingDragged?.getAttribute('candy-id') as string);\n    const squareBeingReplacedId: number = parseInt(squareBeingReplaced?.getAttribute('candy-id') as string);\n\n    newBoard[squareBeingReplacedId] = squareBeingDragged?.getAttribute('src') as string;\n    newBoard[squareBeingDraggedId] = squareBeingReplaced?.getAttribute('src') as string;\n\n    const validMoves: number[] = [\n        squareBeingDraggedId - 1,\n        squareBeingDraggedId - boardSize,\n        squareBeingDraggedId + 1,\n        squareBeingDraggedId + boardSize,\n    ];\n\n    const validMove: boolean = validMoves.includes(squareBeingDraggedId);\n\n    const isAColumnOfFour: boolean | undefined = isColumnOfFour(newBoard, boardSize, formulaForcolumnOfFour(boardSize));\n\n    const isARowOfFour: boolean | undefined = checkForRowOfFour(newBoard, boardSize, generateInvalidMoves(boardSize, true));\n\n    const isAColumnofThree: boolean | undefined = isColumnOfThree(newBoard, boardSize, formulaForcolumnOfThree(boardSize));\n\n    const isARowOfThree: boolean | undefined = checkForRowOfThree(newBoard, boardSize, generateInvalidMoves(boardSize));\n\n    if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnofThree)) {\n        squareBeingDragged = undefined;\n        squareBeingReplaced = undefined;\n    } else {\n        newBoard[squareBeingReplacedId] = squareBeingReplaced?.getAttribute('src') as string;\n        newBoard[squareBeingDraggedId] = squareBeingDragged?.getAttribute('src') as string;\n    }\n    state.board = newBoard;\n};\n"],"mappings":"AACA,SAASA,sBAAsB,EAAEC,uBAAuB,EAAEC,oBAAoB,QAAQ,sBAAsB;AAC5G,SAASC,eAAe,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,cAAc,QAAQ,4BAA4B;AAEnH,OAAO,MAAMC,cAAc,GACvBC,KAKE,IACD;EAAA,IAAAC,mBAAA,EAAAC,oBAAA,EAAAC,oBAAA,EAAAC,qBAAA;EACD,MAAMC,QAAkB,GAAG,CAAC,GAAGL,KAAK,CAACM,KAAK,CAAC;EAC3C,IAAI;IAAEC,SAAS;IAAEC,kBAAkB;IAAEC;EAAoB,CAAC,GAAGT,KAAK;EAClE,MAAMU,oBAA4B,GAAGC,QAAQ,EAAAV,mBAAA,GAACO,kBAAkB,cAAAP,mBAAA,uBAAlBA,mBAAA,CAAoBW,YAAY,CAAC,UAAU,CAAW,CAAC;EACrG,MAAMC,qBAA6B,GAAGF,QAAQ,EAAAT,oBAAA,GAACO,mBAAmB,cAAAP,oBAAA,uBAAnBA,oBAAA,CAAqBU,YAAY,CAAC,UAAU,CAAW,CAAC;EAEvGP,QAAQ,CAACQ,qBAAqB,CAAC,IAAAV,oBAAA,GAAGK,kBAAkB,cAAAL,oBAAA,uBAAlBA,oBAAA,CAAoBS,YAAY,CAAC,KAAK,CAAW;EACnFP,QAAQ,CAACK,oBAAoB,CAAC,IAAAN,qBAAA,GAAGK,mBAAmB,cAAAL,qBAAA,uBAAnBA,qBAAA,CAAqBQ,YAAY,CAAC,KAAK,CAAW;EAEnF,MAAME,UAAoB,GAAG,CACzBJ,oBAAoB,GAAG,CAAC,EACxBA,oBAAoB,GAAGH,SAAS,EAChCG,oBAAoB,GAAG,CAAC,EACxBA,oBAAoB,GAAGH,SAAS,CACnC;EAED,MAAMQ,SAAkB,GAAGD,UAAU,CAACE,QAAQ,CAACN,oBAAoB,CAAC;EAEpE,MAAMO,eAAoC,GAAGnB,cAAc,CAACO,QAAQ,EAAEE,SAAS,EAAEf,sBAAsB,CAACe,SAAS,CAAC,CAAC;EAEnH,MAAMW,YAAiC,GAAGrB,iBAAiB,CAACQ,QAAQ,EAAEE,SAAS,EAAEb,oBAAoB,CAACa,SAAS,EAAE,IAAI,CAAC,CAAC;EAEvH,MAAMY,gBAAqC,GAAGxB,eAAe,CAACU,QAAQ,EAAEE,SAAS,EAAEd,uBAAuB,CAACc,SAAS,CAAC,CAAC;EAEtH,MAAMa,aAAkC,GAAGxB,kBAAkB,CAACS,QAAQ,EAAEE,SAAS,EAAEb,oBAAoB,CAACa,SAAS,CAAC,CAAC;EAEnH,IAAIM,qBAAqB,IAAIE,SAAS,KAAKK,aAAa,IAAIF,YAAY,IAAID,eAAe,IAAIE,gBAAgB,CAAC,EAAE;IAC9GX,kBAAkB,GAAGa,SAAS;IAC9BZ,mBAAmB,GAAGY,SAAS;EACnC,CAAC,MAAM;IAAA,IAAAC,qBAAA,EAAAC,oBAAA;IACHlB,QAAQ,CAACQ,qBAAqB,CAAC,IAAAS,qBAAA,GAAGb,mBAAmB,cAAAa,qBAAA,uBAAnBA,qBAAA,CAAqBV,YAAY,CAAC,KAAK,CAAW;IACpFP,QAAQ,CAACK,oBAAoB,CAAC,IAAAa,oBAAA,GAAGf,kBAAkB,cAAAe,oBAAA,uBAAlBA,oBAAA,CAAoBX,YAAY,CAAC,KAAK,CAAW;EACtF;EACAZ,KAAK,CAACM,KAAK,GAAGD,QAAQ;AAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}