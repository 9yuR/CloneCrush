{"ast":null,"code":"export const isColumnOfFour = (newBoard, boardSize, formulaForcolumnOfFour) => {\n  for (let i = 0; i <= formulaForcolumnOfFour; i++) {\n    const columnOfFour = [i, i + boardSize, i + boardSize * 2, i + boardSize * 3];\n    const decidedColor = newBoard[i];\n    const isBlank = newBoard[i] === '';\n    if (columnOfFour.every(candy => newBoard[candy] === decidedColor && !isBlank)) {\n      columnOfFour.forEach(candy => newBoard[candy] = '');\n      return true;\n    }\n  }\n};\nexport const isColumnOfThree = (newBoard, boardSize, formulaForcolumnOfThree) => {\n  for (let i = 0; i <= formulaForcolumnOfThree; i++) {\n    const columnOfThree = [i, i + boardSize, i + boardSize * 2];\n    const decidedColor = newBoard[i];\n    const isBlank = newBoard[i] === '';\n    if (columnOfThree.every(candy => newBoard[candy] === decidedColor && !isBlank)) {\n      columnOfThree.forEach(candy => newBoard[candy] = '');\n      return true;\n    }\n  }\n};\nexport const checkForRowOfFour = (newBoard, boardSize, invalidMoves) => {\n  for (let i = 0; i < boardSize * boardSize; i++) {\n    const rowOfFour = [i, i + 1, i + 2, i + 3];\n    const decidedColor = newBoard[i];\n    const isBlank = newBoard[i] === '';\n    if (invalidMoves.includes(i)) continue;\n    if (rowOfFour.every(candy => newBoard[candy] === decidedColor && !isBlank)) {\n      rowOfFour.forEach(candy => newBoard[candy] = '');\n      return true;\n    }\n  }\n};","map":{"version":3,"names":["isColumnOfFour","newBoard","boardSize","formulaForcolumnOfFour","i","columnOfFour","decidedColor","isBlank","every","candy","forEach","isColumnOfThree","formulaForcolumnOfThree","columnOfThree","checkForRowOfFour","invalidMoves","rowOfFour","includes"],"sources":["/Users/kamgyul/Desktop/vsc/CCrush/candycrush-clone/src/utils/moveCheckLogic.ts"],"sourcesContent":["export const isColumnOfFour = (newBoard: string[], boardSize: number, formulaForcolumnOfFour: number) => {\n    for (let i: number = 0; i <= formulaForcolumnOfFour; i++) {\n        const columnOfFour: number[] = [i, i + boardSize, i + boardSize * 2, i + boardSize * 3];\n        const decidedColor: string = newBoard[i];\n\n        const isBlank: boolean = newBoard[i] === '';\n\n        if (columnOfFour.every((candy: number) => newBoard[candy] === decidedColor && !isBlank)) {\n            columnOfFour.forEach((candy: number) => (newBoard[candy] = ''));\n            return true;\n        }\n    }\n};\n\nexport const isColumnOfThree = (newBoard: string[], boardSize: number, formulaForcolumnOfThree: number) => {\n    for (let i: number = 0; i <= formulaForcolumnOfThree; i++) {\n        const columnOfThree: number[] = [i, i + boardSize, i + boardSize * 2];\n        const decidedColor: string = newBoard[i];\n\n        const isBlank: boolean = newBoard[i] === '';\n\n        if (columnOfThree.every((candy: number) => newBoard[candy] === decidedColor && !isBlank)) {\n            columnOfThree.forEach((candy: number) => (newBoard[candy] = ''));\n            return true;\n        }\n    }\n};\n\nexport const checkForRowOfFour = (newBoard: string[], boardSize: number, invalidMoves: number[]) => {\n    for (let i: number = 0; i < boardSize * boardSize; i++) {\n        const rowOfFour = [i, i + 1, i + 2, i + 3];\n        const decidedColor: string = newBoard[i];\n\n        const isBlank: boolean = newBoard[i] === '';\n        if (invalidMoves.includes(i)) continue;\n        if (rowOfFour.every((candy: number) => newBoard[candy] === decidedColor && !isBlank)) {\n            rowOfFour.forEach((candy: number) => (newBoard[candy] = ''));\n            return true;\n        }\n    }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAGA,CAACC,QAAkB,EAAEC,SAAiB,EAAEC,sBAA8B,KAAK;EACrG,KAAK,IAAIC,CAAS,GAAG,CAAC,EAAEA,CAAC,IAAID,sBAAsB,EAAEC,CAAC,EAAE,EAAE;IACtD,MAAMC,YAAsB,GAAG,CAACD,CAAC,EAAEA,CAAC,GAAGF,SAAS,EAAEE,CAAC,GAAGF,SAAS,GAAG,CAAC,EAAEE,CAAC,GAAGF,SAAS,GAAG,CAAC,CAAC;IACvF,MAAMI,YAAoB,GAAGL,QAAQ,CAACG,CAAC,CAAC;IAExC,MAAMG,OAAgB,GAAGN,QAAQ,CAACG,CAAC,CAAC,KAAK,EAAE;IAE3C,IAAIC,YAAY,CAACG,KAAK,CAAEC,KAAa,IAAKR,QAAQ,CAACQ,KAAK,CAAC,KAAKH,YAAY,IAAI,CAACC,OAAO,CAAC,EAAE;MACrFF,YAAY,CAACK,OAAO,CAAED,KAAa,IAAMR,QAAQ,CAACQ,KAAK,CAAC,GAAG,EAAG,CAAC;MAC/D,OAAO,IAAI;IACf;EACJ;AACJ,CAAC;AAED,OAAO,MAAME,eAAe,GAAGA,CAACV,QAAkB,EAAEC,SAAiB,EAAEU,uBAA+B,KAAK;EACvG,KAAK,IAAIR,CAAS,GAAG,CAAC,EAAEA,CAAC,IAAIQ,uBAAuB,EAAER,CAAC,EAAE,EAAE;IACvD,MAAMS,aAAuB,GAAG,CAACT,CAAC,EAAEA,CAAC,GAAGF,SAAS,EAAEE,CAAC,GAAGF,SAAS,GAAG,CAAC,CAAC;IACrE,MAAMI,YAAoB,GAAGL,QAAQ,CAACG,CAAC,CAAC;IAExC,MAAMG,OAAgB,GAAGN,QAAQ,CAACG,CAAC,CAAC,KAAK,EAAE;IAE3C,IAAIS,aAAa,CAACL,KAAK,CAAEC,KAAa,IAAKR,QAAQ,CAACQ,KAAK,CAAC,KAAKH,YAAY,IAAI,CAACC,OAAO,CAAC,EAAE;MACtFM,aAAa,CAACH,OAAO,CAAED,KAAa,IAAMR,QAAQ,CAACQ,KAAK,CAAC,GAAG,EAAG,CAAC;MAChE,OAAO,IAAI;IACf;EACJ;AACJ,CAAC;AAED,OAAO,MAAMK,iBAAiB,GAAGA,CAACb,QAAkB,EAAEC,SAAiB,EAAEa,YAAsB,KAAK;EAChG,KAAK,IAAIX,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAGF,SAAS,GAAGA,SAAS,EAAEE,CAAC,EAAE,EAAE;IACpD,MAAMY,SAAS,GAAG,CAACZ,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC;IAC1C,MAAME,YAAoB,GAAGL,QAAQ,CAACG,CAAC,CAAC;IAExC,MAAMG,OAAgB,GAAGN,QAAQ,CAACG,CAAC,CAAC,KAAK,EAAE;IAC3C,IAAIW,YAAY,CAACE,QAAQ,CAACb,CAAC,CAAC,EAAE;IAC9B,IAAIY,SAAS,CAACR,KAAK,CAAEC,KAAa,IAAKR,QAAQ,CAACQ,KAAK,CAAC,KAAKH,YAAY,IAAI,CAACC,OAAO,CAAC,EAAE;MAClFS,SAAS,CAACN,OAAO,CAAED,KAAa,IAAMR,QAAQ,CAACQ,KAAK,CAAC,GAAG,EAAG,CAAC;MAC5D,OAAO,IAAI;IACf;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}